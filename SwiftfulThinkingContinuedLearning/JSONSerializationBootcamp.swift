//
//  JSONSerialization.swift
//  SwiftfulThinkingContinuedLearning
//
//  Created by enesozmus on 22.05.2024.
//

import SwiftUI


// üö® What's really cool thing about Codable is that it does all of this for us on its own.

// ... ‚¨õÔ∏è
struct CondradModel: Identifiable {
    let id: String
    let name: String
    let points: Int
    let isPremium: Bool
}


// ... ‚¨õÔ∏è
class JSONSerializationViewModel: ObservableObject {
    
    @Published var customer: CondradModel? = nil
    
    init() {
        getData()
    }
    // ... üü¶
    func getData() {
        guard let returnedData = getJSONData() else { return }
        
        //        print(".............")
        //        // ‚úÖ 58 bytes
        //        print(returnedData)
        
        //        let jsonString: String? = String(data: returnedData, encoding: .utf8)
        //        // ‚úÖ Optional("{\"name\":\"Emily\",\"id\":\"111\",\"points\":100,\"isPremium\":false}")
        //        print(jsonString)
        
        // üö® yes a lot of work
        // üö® What's really cool thing about Codable is that it does all of this for us on its own.
        if
            let localData: Any = try? JSONSerialization.jsonObject(with: returnedData, options: []),
            let dictionary: [String: Any] = localData as? [String:Any],
            let id = dictionary["id"] as? String,
            let name = dictionary["name"] as? String,
            let points = dictionary["points"] as? Int,
            let isPremium = dictionary["isPremium"] as? Bool {
            
            let newCustomer = CondradModel(id: id, name: name, points: points, isPremium: isPremium)
            customer = newCustomer
        }
    }
    
    // To simulate downloading data from the Internet
    func getJSONData() -> Data? {
        // fake json data
        let dictionary: [String:Any] = [
            "id" : "12345",
            "name" : "Joe",
            "points" : 5,
            "isPremium" : true
        ]
        // convert to json
        let jsonData: Data? = try? JSONSerialization.data(withJSONObject: dictionary, options: [])
        return jsonData;
    }
}


// ... ‚¨õÔ∏è
struct JSONSerializationBootcamp: View {
    
    @StateObject var vm: JSONSerializationViewModel = JSONSerializationViewModel()
    
    var body: some View {
        VStack(spacing: 20) {
            if let customer = vm.customer {
                Text(customer.id)
                Text(customer.name)
                Text("\(customer.points)")
                Text(customer.isPremium.description)
            }
        }
    }
}

#Preview {
    JSONSerializationBootcamp()
}

/*
    1Ô∏è‚É£ We know that not every computer, every program, every application, every platform, and every software developer speaks the same language among themselves.
    2Ô∏è‚É£ For communication, two separate structures need a common language, and at the same time, this language must also have the desired qualities.

    ‚Üí A lot of apps have online features that require a network connection in order to work.
    ‚Üí For example, you need to be online to see the photos in your Instagram feed, or to load and read the latest news in Reddit.
    ‚Üí If you‚Äôre creating an app with online functionality, you might need to depend on a backend API, and read or send data in the form of JSON.
    ‚úÖ We‚Äôre going to explore the Encodable and Decodable protocols, and how it can be used to convert to and from an external representation such as JSON.

    üî¥ JSON
        ‚Üí JavaScript Object Notation
        ‚Üí (JSON) is a standard text-based format for representing structured data based on JavaScript object syntax.
        ‚Üí JSON is an open standard file format, and data interchange format, that uses human-readable to store and transmit data objects consisting of attribute-value pairs and array data types.
        ‚Üí Thanks to its simplicity, flexibility, and compatibility with popular programming languages, JSON is a lightweight data interchange format that provides a standardized and efficient way for different systems, platforms, and programming languages to exchange data.
        ‚úÖ Yes, we have the common file format to easily communicate with other developers or fetch the data!

    üî¥ Why Is JSON Used?
        ‚Üí JSON's language-independent nature makes it an ideal format for exchanging data across different programming languages and platforms.
        ‚Üí For instance, an application written in Java can easily send JSON data to a Python application.
        ‚Üí Or a mobile app written in JavaScript can use JSON to communicate with a back-end server written in PHP.
        ‚Üí Why?
        ‚Üí Because both systems can parse and generate JSON.
        ‚Üí JSON is also used within an application or an IT system for storing and managing configuration settings.
        ‚Üí For example, configuration files written in JSON format can contain essential information, such as database connection details, API keys, or user preferences.
 */

/*
    üî¥ JSONSerialization
        ‚Üí An object that converts between JSON and the equivalent Foundation objects.
        ‚Üí You use the JSONSerialization class to convert JSON to Foundation objects and convert Foundation objects to JSON.
        ‚Üí If you want to parse JSON by hand rather than using Codable, iOS has a built-in alternative called JSONSerialization.

    üî¥ .jsonObject(with:options:)
        ‚Üí Returns a Foundation object from given JSON data.

    üî¥ .data(withJSONObject:options:)
        ‚Üí Returns JSON data from a Foundation object.
 */
